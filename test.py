import struct

data = b'\x0e\x01\x00\x00\x00\x9a\x87}j8\xe6\x87\xbf.\xd0\x89\xae\xa3\x16\xf5\x18mn\xc3<u\xac\xc0+R\xe1\xdc\x89\x19\xd9\x11\xb1\x01\x00\x00\x00j\xa37:\xde3\xad\xc3\xab}\xdfH\xf0|\xab\xfa\x8ai\xcc\xdf\xee\x9f\x03\xab\xeb\xf9\x97\xfe/\x08\x93\xc3\x01\x00\x00\x00\x1d,~MJ@\xf6Nm\x81\x82\xf9\xfayG^\xec-\xac\xcc\x9cZ\xdb\xc8C\xeeV\xf7\xd8\x88\xed0\x01\x00\x00\x00\xe8=d\xcd\x861\xb1\xb8\xe8R\x16\x0e\xf8\xa4\xc3itl\xa1u\xff~\xb7\x0c%"\x8c\x11\xce\xb0X\x83\x01\x00\x00\x00\xc9r\xceM;\x8f\xa6\xa7\xb9\xf1\xe1qV\xe5_^\x1e\x7f?>O\xf3\xc6hU\xa6\xab\'\x99-:1\x01\x00\x00\x00\xba\xcbf\xcc/k\x87-\xa3\xa8O8\xfcG,`\xf3Ik\xd7\xc7\xf7|\x0ey\x15.o\xcbu\x8a\xeb\x01\x00\x00\x00-R\xe2\xd4n:\xca\xfcf\x84\xfc\xca c\x1d\\\xa1Y\xcdE\xbbn>x\x94PIZ)]\xbf\xf0\x01\x00\x00\x00\xd5*\xad\xdf\xec\xb6\xdeK\xad5\t\x81\x0e\x99\xfb!$d\xf2\x89\xc2\x1eA\xda\xa9\xdaj\xcfHg\xfb\xb5\x01\x00\x00\x00\xc1A\x0b\x84\xa7\xb12\xc1\xcb\x90O\xa3\xef\xd0n\x9ff\x97z5\x0c\x11\xe4{\xe3\xd9\xe3!\xf0gT)\x01\x00\x00\x00\xa5\xc8\xa9\xceU\x19\x9d\xc6\xc1Y\x1b\x98\xb2\xd1\x063\x84\xb4\xfd^k\xf8.\xa7\xee\xad\t\xec\xea4pq\x01\x00\x00\x00w\x05\x11\x82\xc7mR?\xff\x91D6\xb711\x93\xbdPv\xbb\xe7S}a%4<9\x9dH\xee\x87\x01\x00\x00\x00*.x\x99\xc7\xbbJ\xdb\xccX\xe5\xc8\xc7\x8c\xfb{\xc5p7\xd3\xd5N\xdcm\xf1CvP\x86*\xbe\x85\x01\x00\x00\x008nO\x8cf\xaa\x92\x0b\x92P\x11\xdc\xfb\x1cO\xeb\xf7\x12t\x8c\x7fh\x03\xbco\xc0\x1e\x7f\x8e\x1fe\xd7\x01\x00\x00\x00\xfcc\xb5\x8e\xeb[l;\xb5\x91j\xc4\xf5\xc2\xbd4\x10~BA\xda\x004\xde\xcc\xe7\xa7\x12\xfc\x16\xa8B'

# Extract the count
count = struct.unpack('<B', data[:1])[0]  # '<B' is little-endian unsigned char
print(f'Count: {count}')

# Initialize list to hold inventory vectors
inventory_vectors = []

# Offset to start of inventory vectors
offset = 1

# Each inventory vector is 36 bytes
vector_size = 36

for i in range(count):
    # Extract type (4 bytes) and hash (32 bytes)
    vector_data = data[offset:offset + vector_size]
    vector_type = struct.unpack('<I', vector_data[:4])[0]  # '<I' is little-endian unsigned int
    vector_hash = vector_data[4:]
    
    # Append to list
    inventory_vectors.append((vector_type, vector_hash.hex()))
    
    # Update offset
    offset += vector_size

# Print the inventory vectors
for idx, (vector_type, vector_hash) in enumerate(inventory_vectors):
    print(f'Inventory Vector {idx + 1}:')
    print(f'  Type: {vector_type}')
    print(f'  Hash: {vector_hash}')